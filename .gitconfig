an = commit --amend --no-edit
br = branch
dt = difftool
mt = mergetool
co = checkout
cob = checkout -b
ci = commit
cm = commit -m
st = status
hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --decorate --date=short
lg = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

# Show files changed in each commit
ll = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --numstat

# Grep the log
glag = log -E -i --grep

# The extra '&& :' is needed: https://stackoverflow.com/a/25915221
sync = !git fetch --all --prune && git rebase -p --autostash $1 && :

# Commits everything in my working directory and then does a hard reset to remove that commit.
# You can reach that commit later in 'git reflog'
wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

# Get the current branch name (not so useful in itself, but used in other aliases)
branch-name = !git rev-parse --abbrev-ref HEAD

# Push the current branch to the remote "origin", and set it to track
# the upstream branch
publish = !git push -u origin $(git branch-name)

# Push to remote with force when no changes have occured
publishf = !git push -u origin --force-with-lease $(git branch-name)

# Pull with rebase on a given branch
remerge = !git pull --rebase origin

# Delete the remote version of the current branch
unpublish = !git push origin :$(git branch-name)

uncommit = !git reset --soft HEAD^
unstage = !git reset
upstream = rev-parse --abbrev-ref --symbolic-full-name @{upstream}

# Rename [branch] to done-[branch]
done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

# Stash only staged changes
sp = stash push --staged
spm = stash push --staged -m

# Stash only unstaged changes
su = stash push --keep-index
sum = stash push --keep-index -m

# Reapply a specific stash
# Usage: git stash apply-index 0
sasi = "!f() { git stash apply --index stash@{$1}; }; f"

# Reapply only the staged changes in the last stash
sai = stash apply --index

# Reapply only the staged changes in the last stash and drop it
sap = stash apply --index && stash drop

# Drop the last stash
sd = stash drop

# Show the last stash
ss = stash show

# Show the last stash in full
ssf = stash show -p

# Show all stashes
sa = stash list

# Show all stashes in full
saf = stash list -p

# Show the last stash in full and drop it
ssfd = stash show -p && stash drop

# Show all stashes in full and drop them
safd = stash list -p && stash clear

# Show the last stash in full and apply it
ssfa = stash show -p && stash apply

# Show all stashes in full and apply them
safa = stash list -p && stash apply

# Show the last stash in full and apply it, then drop it
ssfad = stash show -p && stash apply && stash drop

# Show all stashes in full and apply them, then drop them
safad = stash list -p && stash apply && stash clear

# Drop a specific stash using its index
# Usage: git stash drop-index 0
sdi = "!f() { git stash drop stash@{$1}; }; f"

# Open git config in the default editor
config-edit = config --global -e

# List all aliases
aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

# List all aliases with their commands
alias-commands = !git config --get-regexp 'alias.*' | colrm 1 6

# List all aliases with their commands and descriptions
alias-descriptions = !git config --get-regexp 'alias.*' | colrm 1 6 | xargs -I{} sh -c 'echo {}; git config alias."{}"'
